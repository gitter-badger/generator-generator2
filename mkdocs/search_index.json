{
    "docs": [
        {
            "location": "/", 
            "text": "Yeoman 2nth generator with easier and opinionated workflow.\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\nProject is still in development, so documentation is uncomplete!\n\n\n\n\n\n\nInformations\n#\n\n\nWhat is yeoman?\n\n\nYeoman\n is a generic scaffolding system allowing the creation of any kind of app.\nIt allows for rapidly getting started on new projects and streamlines the maintenance of existing projects.\nYeoman is language agnostic. It can generate projects in any language (Web, Java, Python, C#, etc.)\n\n\ngenerator-generator?\n\n\nYeoman has default generator named \ngenerator-generator\n. \nWith this generator user can make their own generator by extending \ngenerator runtime context\n\nmethods to customize generation process of their projects. By default \nGG\n (generator-generator)\nis unopinionated with some basic \nutility methods\n which are more or less low level.\nUser must write code to make generator work.\n\n\ngenerator-generator2?\n\n\nGG2\n (generator-generator2) try to remove the need to write any code and make standardization how projects should\nbe generated and still leave option to customize runtime context, for hard core programmers. GG2 is build upon GG!\n\n\nFeatures\n#\n\n\n\n\nProvide \nlogging\n for your generator.\n\n\nEJS templating\n for \nfiles\n content and \ndirectories\n names.\n\n\nLine injector\n for file content.\n\n\nProvide \nlicenser\n for your generator.\n\n\nPrompt validation\n on user input.\n\n\nEtc... \n\n\n\n\nInstalation\n#\n\n\nTo use GG2 you must have \nnode.js\n. If you have latest node\nyou can install yo and GG2 packages.\n\n\n#Install yeoman cli tool.\nnpm install -g yo\n\n#Install generator.\nnpm install -g generator-generator2\n\n\n\n\n\nUsage\n#\n\n\nRun generator.\nyo generator2\n\n#Creates generator.debug file while running generator.\nyo generator2 --debug\n\n\n\n\n\nLicense\n#\n\n\nCopyright \u00a9 2016 Uro\u0161 Jarc\n\n\nMIT License", 
            "title": "Project"
        }, 
        {
            "location": "/#informations", 
            "text": "What is yeoman?  Yeoman  is a generic scaffolding system allowing the creation of any kind of app.\nIt allows for rapidly getting started on new projects and streamlines the maintenance of existing projects.\nYeoman is language agnostic. It can generate projects in any language (Web, Java, Python, C#, etc.)  generator-generator?  Yeoman has default generator named  generator-generator . \nWith this generator user can make their own generator by extending  generator runtime context \nmethods to customize generation process of their projects. By default  GG  (generator-generator)\nis unopinionated with some basic  utility methods  which are more or less low level.\nUser must write code to make generator work.  generator-generator2?  GG2  (generator-generator2) try to remove the need to write any code and make standardization how projects should\nbe generated and still leave option to customize runtime context, for hard core programmers. GG2 is build upon GG!", 
            "title": "Informations"
        }, 
        {
            "location": "/#features", 
            "text": "Provide  logging  for your generator.  EJS templating  for  files  content and  directories  names.  Line injector  for file content.  Provide  licenser  for your generator.  Prompt validation  on user input.  Etc...", 
            "title": "Features"
        }, 
        {
            "location": "/#instalation", 
            "text": "To use GG2 you must have  node.js . If you have latest node\nyou can install yo and GG2 packages.  #Install yeoman cli tool.\nnpm install -g yo\n\n#Install generator.\nnpm install -g generator-generator2", 
            "title": "Instalation"
        }, 
        {
            "location": "/#usage", 
            "text": "Run generator.\nyo generator2\n\n#Creates generator.debug file while running generator.\nyo generator2 --debug", 
            "title": "Usage"
        }, 
        {
            "location": "/#license", 
            "text": "Copyright \u00a9 2016 Uro\u0161 Jarc  MIT License", 
            "title": "License"
        }, 
        {
            "location": "/tutorial/", 
            "text": "Generate project\n#\n\n\nFirst follow \ninstallation\n section and install requirements.\nStart GG2 with yeoman CLI to generate starting structure.\n\n\nyo generator2\n\n\n\n\n\nCommand will generate your generator structure:\n\n\n.\n\u251c\u2500\u2500 generators/\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 app/\n\u2502\u00a0\u00a0 |   \u251c\u2500\u2500 USAGE\n\u2502\u00a0\u00a0 |   \u2514\u2500\u2500 index.js\n|   \u2514\u2500\u2500 subgenerator/\n|       \u251c\u2500\u2500 index.js\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 templates/\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 base/\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 module/\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 setup\n|    \u00a0\u00a0         \u251c\u2500\u2500 base/\n|    \u00a0\u00a0         \u251c\u2500\u2500 ejs/\n|    \u00a0\u00a0         \u2514\u2500\u2500 injector/\n\u251c\u2500\u2500 .editorconfig\n\u251c\u2500\u2500 .gitattributes\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 .eslintrc\n\u251c\u2500\u2500 .travis.yml\n\u251c\u2500\u2500 .yo-rc.json\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 gulpfile.js\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 LICENSE\n\u2514\u2500\u2500 test/\n    \u2514\u2500\u2500 app.js\n\n\n\n\n\nCustomize promping\n#\n\n\nOpen \ngenerators/app/index.js\n file and modify app questions.\n\n\n\n\nWarning\n\n\napp.license\n and \napp.sugenerator\n should stay the same, unless you know\nwhat it means to delete those objects.\n\n\n\n\nSubgenerator\n#\n\n\nExample of good arhitecture is located at\n\nurosjarc/generator-generate\n\n\nRename subgenerator directory in \ngenerators/\n folder.\nYou should name it something like \njava\n or \npython\n.\n\n\nCreate bases\n#\n\n\nAdd folders in \nsubgen\n/templates/base\n and name them something like\n\nserver\n, \nlib\n, \nwebsite\n or \ncli-tool\n. Those folders will hold\nproject specific files.\n\n\nCreate modules\n#\n\n\nAdd folders in \nsubgen\n/templates/module\n and name them something like\n\ndatabase\n, \nlogger\n or \ndocs\n. Those folders will hold your project\nspecific files for modules.\n\n\nSetup configuration\n#\n\n\ntemp./setup/bases\n#\n\n\nAdd folders and files in \nsubgen\n/templates/setup/base\n.\nThis folder will hold files and folders which all bases will use.\nHere you should place \n.gitignore\n, \n.editorconfig\n, \n.travis.yml\n.\n\n\ntemp./setup/ejs\n#\n\n\nAdd folders and files in \nsubgen\n/templates/setup/ejs\n. Here you should\nplace files which will provide \nEJS\n template content for \nsetup/base\n, \nbase\n, \nmodule\n\nfolders and files.\n\n\nFor example file with path \nsubgen\n/templates/setup/ejs/readme/somedir/header\n with content\n\nHello world!\n will be setup as \nEJS\n key \nejs.readme_somedir_header\n. You can use EJS templating\nsystem within \nbase/*\n, \nmodule/*\n, and \nsetup/base/*\n.\n\n\n\n\nWarnings\n\n\n\n\nPath slashes (\n/\n) will be replaced with underscore characted (\n_\n).\n\n\nThere should always be \nlicense\n file in \nejs/\n directory. Content\n   of \nlicense\n file will be compiled when generator will run.\n\n\nYou can access prompt answeres joust like you setup questions for the prompt (\napp.name\n, \napp.license\n).\n\n\n\n\n\n\ntemp./setup/injector\n#\n\n\nAdd yml files and name them with the same names as folders in \nsubgen\n/templates/module\n.\nWhen generator will be generating module you will want to inject files at specific line.\n\n\nFor example when generating module \ndatabase\n you would want to inject lines in to your\n\nsetup.py\n or \nbuild.gradle\n with dependency information.\n\n\nFile \ndatabase.yml\n:\n\n\n./setup.py\n:\n\n  \nflag\n:\n \n#Dependencies\n\n  \ntext\n:\n \n|-\n\n    \nmysql\n\n    \nmysql_connect\n\n\n\n./package/__init__.py\n:\n\n  \nflag\n:\n \n#Import\n\n  \ntext\n:\n \n|-\n\n    \nimport mysql\n\n    \nimport mysql_connect\n\n\n\n\n\n\n\n\nInfo\n\n\nInjector will inject text lines after flag at the \nsame indentation\n!\n\n\n\n\nSubgenerator methods\n#\n\n\nAfter base or module generation specific method in \nsubgen\n/index.js\n\nwith the same name as base or module will be executed. Here you can for example\ninstall dependencies for generated project or test generated structure. \n\n\nStart your generator\n#\n\n\nThen link this generator to start using it.\nWhen running generator for the first time you will be asked\nwhich subgenerator you want to use, and then what project you would like\nto generate. When running generator in the same directory for the second time\nyou will be asked which module you want to generate.\n\n\nnpm link\nyo \ngenerator-name", 
            "title": "Tutorial"
        }, 
        {
            "location": "/tutorial/#generate-project", 
            "text": "First follow  installation  section and install requirements.\nStart GG2 with yeoman CLI to generate starting structure.  yo generator2  Command will generate your generator structure:  .\n\u251c\u2500\u2500 generators/\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 app/\n\u2502\u00a0\u00a0 |   \u251c\u2500\u2500 USAGE\n\u2502\u00a0\u00a0 |   \u2514\u2500\u2500 index.js\n|   \u2514\u2500\u2500 subgenerator/\n|       \u251c\u2500\u2500 index.js\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 templates/\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 base/\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 module/\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 setup\n|    \u00a0\u00a0         \u251c\u2500\u2500 base/\n|    \u00a0\u00a0         \u251c\u2500\u2500 ejs/\n|    \u00a0\u00a0         \u2514\u2500\u2500 injector/\n\u251c\u2500\u2500 .editorconfig\n\u251c\u2500\u2500 .gitattributes\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 .eslintrc\n\u251c\u2500\u2500 .travis.yml\n\u251c\u2500\u2500 .yo-rc.json\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 gulpfile.js\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 LICENSE\n\u2514\u2500\u2500 test/\n    \u2514\u2500\u2500 app.js", 
            "title": "Generate project"
        }, 
        {
            "location": "/tutorial/#customize-promping", 
            "text": "Open  generators/app/index.js  file and modify app questions.   Warning  app.license  and  app.sugenerator  should stay the same, unless you know\nwhat it means to delete those objects.", 
            "title": "Customize promping"
        }, 
        {
            "location": "/tutorial/#subgenerator", 
            "text": "Example of good arhitecture is located at urosjarc/generator-generate  Rename subgenerator directory in  generators/  folder.\nYou should name it something like  java  or  python .", 
            "title": "Subgenerator"
        }, 
        {
            "location": "/tutorial/#create-bases", 
            "text": "Add folders in  subgen /templates/base  and name them something like server ,  lib ,  website  or  cli-tool . Those folders will hold\nproject specific files.", 
            "title": "Create bases"
        }, 
        {
            "location": "/tutorial/#create-modules", 
            "text": "Add folders in  subgen /templates/module  and name them something like database ,  logger  or  docs . Those folders will hold your project\nspecific files for modules.", 
            "title": "Create modules"
        }, 
        {
            "location": "/tutorial/#setup-configuration", 
            "text": "", 
            "title": "Setup configuration"
        }, 
        {
            "location": "/tutorial/#tempsetupbases", 
            "text": "Add folders and files in  subgen /templates/setup/base .\nThis folder will hold files and folders which all bases will use.\nHere you should place  .gitignore ,  .editorconfig ,  .travis.yml .", 
            "title": "temp./setup/bases"
        }, 
        {
            "location": "/tutorial/#tempsetupejs", 
            "text": "Add folders and files in  subgen /templates/setup/ejs . Here you should\nplace files which will provide  EJS  template content for  setup/base ,  base ,  module \nfolders and files.  For example file with path  subgen /templates/setup/ejs/readme/somedir/header  with content Hello world!  will be setup as  EJS  key  ejs.readme_somedir_header . You can use EJS templating\nsystem within  base/* ,  module/* , and  setup/base/* .   Warnings   Path slashes ( / ) will be replaced with underscore characted ( _ ).  There should always be  license  file in  ejs/  directory. Content\n   of  license  file will be compiled when generator will run.  You can access prompt answeres joust like you setup questions for the prompt ( app.name ,  app.license ).", 
            "title": "temp./setup/ejs"
        }, 
        {
            "location": "/tutorial/#tempsetupinjector", 
            "text": "Add yml files and name them with the same names as folders in  subgen /templates/module .\nWhen generator will be generating module you will want to inject files at specific line.  For example when generating module  database  you would want to inject lines in to your setup.py  or  build.gradle  with dependency information.  File  database.yml :  ./setup.py : \n   flag :   #Dependencies \n   text :   |- \n     mysql \n     mysql_connect  ./package/__init__.py : \n   flag :   #Import \n   text :   |- \n     import mysql \n     import mysql_connect    Info  Injector will inject text lines after flag at the  same indentation !", 
            "title": "temp./setup/injector"
        }, 
        {
            "location": "/tutorial/#subgenerator-methods", 
            "text": "After base or module generation specific method in  subgen /index.js \nwith the same name as base or module will be executed. Here you can for example\ninstall dependencies for generated project or test generated structure.", 
            "title": "Subgenerator methods"
        }, 
        {
            "location": "/tutorial/#start-your-generator", 
            "text": "Then link this generator to start using it.\nWhen running generator for the first time you will be asked\nwhich subgenerator you want to use, and then what project you would like\nto generate. When running generator in the same directory for the second time\nyou will be asked which module you want to generate.  npm link\nyo  generator-name", 
            "title": "Start your generator"
        }, 
        {
            "location": "/contribution/", 
            "text": "I would love for you to contribute to our source code and to make GG2 even better than it is\ntoday! Here are the guidelines for you to follow...\n\n\nGot a Question?\n#\n\n\nIf you have questions about how to use GG2, please create new issue\nin which you point out which section of documentation is lacking with information.\n\n\nFound an Issue?\n#\n\n\nIf you find a bug in the source code or a mistake in the documentation, you can help by\nsubmitting an issue to our \nGitHub Repository\n. Even better you can submit a Pull Request\nwith a fix.\n\n\nWant a Feature?\n#\n\n\nYou can request a new feature by submitting an issue to our \nGitHub Repository\n.  If you\nwould like to implement a new feature then consider what kind of change it is:\n\n\n\n\nMajor Changes\n that you wish to contribute to the project make an issue explaining details.\n  so that I can better coordinate efforts, prevent duplication of work, and help you to\n  craft the change so that it is successfully accepted into the project.\n\n\nSmall Changes\n can be crafted and submitted to the \nGitHub Repository\n as a Pull\n  Request.\n\n\n\n\nWant a Doc Fix?\n#\n\n\nIf you want to help improve the docs, it's a good idea to let others know what you're working on to\nminimize duplication of effort. Create a new issue (or comment on a related existing one) to let\nothers know what you're working on.\n\n\nSubmitting an Issue\n#\n\n\nBefore you submit your issue search the archive, maybe your question was already answered.\n\n\nIf your issue appears to be a bug, and hasn't been reported, open a new issue. Help to maximize\nthe effort on fixing issues and adding new features, by not reporting duplicate issues.\nProviding the following information will increase the chances of your issue being dealt with\nquickly:\n\n\n\n\nOverview of the Issue\n - if an error is being thrown a non-minified stack trace helps\n\n\nDebug log file\n - Use \nyo generator2 --debug\n to create debug log file.\n\n\nMotivation for or Use Case\n - explain why this is a bug for you\n\n\nRelated Issues\n - has a similar issue been reported before?\n\n\nSuggest a Fix\n - if you can't fix the bug yourself, perhaps you can point to what might be\n  causing the problem (line of code or commit)\n\n\n\n\nIf you get help, help others. Good karma rulez!\n\n\nSubmitting a Pull Request\n#\n\n\nBefore you submit your pull request consider the following guidelines:\n\n\n\n\nSearch \nGitHub\n for an open or closed Pull Request\n  that relates to your submission. You don't want to duplicate effort.\n\n\n\n\nMake your changes in a new git branch:\n\n\ngit checkout -b my-fix-branch master\n\n\n\n\n\n\nCreate your patch, \nincluding appropriate test cases\n.\n\n\n\n\n\n\nRun test suite. and ensure that all tests pass.\n\n\ngulp\n\n\n\n\n\n\nCommit your changes using a descriptive commit message.\n\n\n\n\n\n\nPush your branch to GitHub:\n\n\ngit push origin my-fix-branch\n\n\n\n\n\n\nIn GitHub, send a pull request to \ngenerator-generator2:master\n.\n\n\nThat's it! Thank you for your contribution!\n\n\nCoding Rules\n#\n\n\nTo ensure consistency throughout the source code, keep these rules in mind as you are working:\n\n\n\n\nAll features or bug fixes \nmust be tested\n by one or more [specs][unit-testing].\n\n\nAll public API methods \nmust be documented\n with jsdoc3", 
            "title": "Contribution"
        }, 
        {
            "location": "/contribution/#got-a-question", 
            "text": "If you have questions about how to use GG2, please create new issue\nin which you point out which section of documentation is lacking with information.", 
            "title": "Got a Question?"
        }, 
        {
            "location": "/contribution/#found-an-issue", 
            "text": "If you find a bug in the source code or a mistake in the documentation, you can help by\nsubmitting an issue to our  GitHub Repository . Even better you can submit a Pull Request\nwith a fix.", 
            "title": "Found an Issue?"
        }, 
        {
            "location": "/contribution/#want-a-feature", 
            "text": "You can request a new feature by submitting an issue to our  GitHub Repository .  If you\nwould like to implement a new feature then consider what kind of change it is:   Major Changes  that you wish to contribute to the project make an issue explaining details.\n  so that I can better coordinate efforts, prevent duplication of work, and help you to\n  craft the change so that it is successfully accepted into the project.  Small Changes  can be crafted and submitted to the  GitHub Repository  as a Pull\n  Request.", 
            "title": "Want a Feature?"
        }, 
        {
            "location": "/contribution/#want-a-doc-fix", 
            "text": "If you want to help improve the docs, it's a good idea to let others know what you're working on to\nminimize duplication of effort. Create a new issue (or comment on a related existing one) to let\nothers know what you're working on.", 
            "title": "Want a Doc Fix?"
        }, 
        {
            "location": "/contribution/#submitting-an-issue", 
            "text": "Before you submit your issue search the archive, maybe your question was already answered.  If your issue appears to be a bug, and hasn't been reported, open a new issue. Help to maximize\nthe effort on fixing issues and adding new features, by not reporting duplicate issues.\nProviding the following information will increase the chances of your issue being dealt with\nquickly:   Overview of the Issue  - if an error is being thrown a non-minified stack trace helps  Debug log file  - Use  yo generator2 --debug  to create debug log file.  Motivation for or Use Case  - explain why this is a bug for you  Related Issues  - has a similar issue been reported before?  Suggest a Fix  - if you can't fix the bug yourself, perhaps you can point to what might be\n  causing the problem (line of code or commit)   If you get help, help others. Good karma rulez!", 
            "title": "Submitting an Issue"
        }, 
        {
            "location": "/contribution/#submitting-a-pull-request", 
            "text": "Before you submit your pull request consider the following guidelines:   Search  GitHub  for an open or closed Pull Request\n  that relates to your submission. You don't want to duplicate effort.   Make your changes in a new git branch:  git checkout -b my-fix-branch master    Create your patch,  including appropriate test cases .    Run test suite. and ensure that all tests pass.  gulp    Commit your changes using a descriptive commit message.    Push your branch to GitHub:  git push origin my-fix-branch    In GitHub, send a pull request to  generator-generator2:master .  That's it! Thank you for your contribution!", 
            "title": "Submitting a Pull Request"
        }, 
        {
            "location": "/contribution/#coding-rules", 
            "text": "To ensure consistency throughout the source code, keep these rules in mind as you are working:   All features or bug fixes  must be tested  by one or more [specs][unit-testing].  All public API methods  must be documented  with jsdoc3", 
            "title": "Coding Rules"
        }, 
        {
            "location": "/developers/", 
            "text": "This document describes how to set up your development environment to build and test project. \nIt also explains the basic mechanics of using \ngit\n, \nnode\n, \nnpm\n, \ngulp\n.\n\n\nSee the \ncontribution guidelines\n\nif you'd like to contribute.\n\n\nPrerequisite Software\n#\n\n\nBefore you can build and test project, you must install and configure the\nfollowing products on your development machine:\n\n\n\n\n\n\nGit\n and/or the \nGitHub app\n (for \nMac\n or\n  \nWindows\n); \nGitHub's Guide to Installing\n  Git\n is a good source of information.\n\n\n\n\n\n\nNode.js\n, (version \n=0.10 \n6\n) which is used to run,\n  run tests, source files. We also use Node's Package Manager, \nnpm\n\n  which comes with Node. Depending on your system, you can install Node either from\n  source or as a pre-packaged bundle.\n\n\n\n\n\n\nGetting the Sources\n#\n\n\nFork and clone the project repository:\n\n\n\n\nLogin to your GitHub account or create one by following the instructions given\n   \nhere\n.\n\n\nFork\n the \nmain project \n   repository\n.\n\n\nClone your fork of the Angular repository and define an \nupstream\n remote pointing back to\n   the Angular repository that you forked in the first place.\n\n\n\n\n# Clone your GitHub repository:\n\ngit clone git@github.com:\ngithub username\n/generator-generator2.git\n\n\n# Go to the project directory:\n\n\ncd\n generator-generator2\n\n\n# Add the main project repository as an upstream remote to your repository:\n\ngit remote add upstream https://github.com/urosjarc/generator-generator2.git\n\n\n\n\n\nInstalling NPM Modules\n#\n\n\nNext, install the JavaScript modules needed to build and test project:\n\n\n# Install project dependencies (package.json)\n\nnpm install\n\n\n\n\n\nOptional\n: In this document, we make use of project local \nnpm\n package scripts and binaries\n(stored under \n./node_modules/.bin\n) by prefixing these command invocations with \n$(npm bin)\n; in\nparticular \ngulp\n commands. If you prefer, you can drop this path prefix by either:\n\n\nOption 1\n: globally installing these two packages as follows:\n\n\n\n\nnpm install -g gulp\n (you might need to prefix this command with \nsudo\n)\n\n\n\n\nSince global installs can become stale, and required versions can vary by project, we avoid their\nuse in these instructions.\n\n\nRunning Tests Locally\n#\n\n\n#Runing test suite:\n\ngulp \ntest\n\n\n\n#Simulate CI testing:\n\ngulp", 
            "title": "Developers"
        }, 
        {
            "location": "/developers/#prerequisite-software", 
            "text": "Before you can build and test project, you must install and configure the\nfollowing products on your development machine:    Git  and/or the  GitHub app  (for  Mac  or\n   Windows );  GitHub's Guide to Installing\n  Git  is a good source of information.    Node.js , (version  =0.10  6 ) which is used to run,\n  run tests, source files. We also use Node's Package Manager,  npm \n  which comes with Node. Depending on your system, you can install Node either from\n  source or as a pre-packaged bundle.", 
            "title": "Prerequisite Software"
        }, 
        {
            "location": "/developers/#getting-the-sources", 
            "text": "Fork and clone the project repository:   Login to your GitHub account or create one by following the instructions given\n    here .  Fork  the  main project \n   repository .  Clone your fork of the Angular repository and define an  upstream  remote pointing back to\n   the Angular repository that you forked in the first place.   # Clone your GitHub repository: \ngit clone git@github.com: github username /generator-generator2.git # Go to the project directory:  cd  generator-generator2 # Add the main project repository as an upstream remote to your repository: \ngit remote add upstream https://github.com/urosjarc/generator-generator2.git", 
            "title": "Getting the Sources"
        }, 
        {
            "location": "/developers/#installing-npm-modules", 
            "text": "Next, install the JavaScript modules needed to build and test project:  # Install project dependencies (package.json) \nnpm install  Optional : In this document, we make use of project local  npm  package scripts and binaries\n(stored under  ./node_modules/.bin ) by prefixing these command invocations with  $(npm bin) ; in\nparticular  gulp  commands. If you prefer, you can drop this path prefix by either:  Option 1 : globally installing these two packages as follows:   npm install -g gulp  (you might need to prefix this command with  sudo )   Since global installs can become stale, and required versions can vary by project, we avoid their\nuse in these instructions.", 
            "title": "Installing NPM Modules"
        }, 
        {
            "location": "/developers/#running-tests-locally", 
            "text": "#Runing test suite: \ngulp  test  #Simulate CI testing: \ngulp", 
            "title": "Running Tests Locally"
        }, 
        {
            "location": "/documentation/", 
            "text": "Project documentation\n#", 
            "title": "Documentation"
        }, 
        {
            "location": "/documentation/#project-documentation", 
            "text": "", 
            "title": "Project documentation"
        }, 
        {
            "location": "/changes/", 
            "text": "Content of this file is generated by the build system.", 
            "title": "Changes"
        }
    ]
}